(import ncurses)

#|curses with wide characters does not seem to work|#
(define frame-upper-left    #\+);#\u2554)
(define frame-lower-left    #\+);#\u255A)
(define frame-upper-right   #\+);#\u2557)
(define frame-lower-right   #\+);#\u255D)
(define frame-lr            #\|);#\u2551)
(define frame-tb            #\=);#\u2550)
(define reckoning-bar       #\-);#\u2501)
(define reckoning-bar-guide #\~);#\u2505)
(define bare-rung           #\|);#\u250A)
(define inactive-bead       #\o);#\u25EF)
(define active-heaven-bead  #\5);#\u3224)
(define active-earth-bead   #\1);#\u3220)

(define (make-state)
  (make-vector 24 (list (cons 'heaven 0) (cons 'earth 0))))

(define (toggle-heaven! state rung)
  (let* ((rung-state (vector-ref state rung))
	 (heaven-state (cdr (assoc 'heaven rung-state)))
	 (earth-state (cdr (assoc 'earth rung-state))))
    (cond ((= heaven-state 0)
	   (vector-set! state rung (list (cons 'heaven 1) (cons 'earth earth-state))))
	  ((= heaven-state 1)
	   (vector-set! state rung (list (cons 'heaven 0) (cons 'earth earth-state))))
	  (else
	   (vector-set! state run (list (cons 'heaven 0) (cons 'earth earth-state)))))))

(define (add1-earth! state rung)
  (let* ((rung-state (vector-ref state rung))
	 (heaven-state (cdr (assoc 'heaven rung-state)))
	 (earth-state (cdr (assoc 'earth rung-state))))
    (cond ((and (>= earth-state 0) (< earth-state 4))
	   (vector-set! state rung (list (cons 'heaven heaven-state)
					 (cons 'earth (add1 earth-state)))))
	  ((= earth-state 4)
	   state)
	  (else
	   (vector-set! state rung (list (cons 'heaven heaven-state)
					 (cons 'earth 0)))))))

(define (sub1-earth! state rung)
  (let* ((rung-state (vector-ref state rung))
	 (heaven-state (cdr (assoc 'heaven rung-state)))
	 (earth-state (cdr (assoc 'earth rung-state))))
    (cond ((and (> earth-state 0) (<= earth-state 4))
	   (vector-set! state rung (list (cons 'heaven heaven-state)
					 (cons 'earth (sub1 earth-state)))))
	  ((= earth-state 0)
	   state)
	  (else
	   (vector-set! state rung (list (cons 'heaven heaven-state)
					 (cons 'earth 0)))))))

(define (rung-value state rung)
  (let* ((rung-state (vector-ref state rung))
	 (heaven-state (cdr (assoc 'heaven rung-state)))
	 (earth-state (cdr (assoc 'earth rung-state))))
    (+ (* heaven-state 5) earth-state)))

(define (init-nc)
  (initscr)
  (raw)
  (noecho)
  (start_color))

(define (deinit-nc)
  (endwin))

(define (draw-frame)
  (mvaddch 0 0 frame-upper-left)
  (mvaddch 9 0 frame-lower-left)
  (mvaddch 0 25 frame-upper-right)
  (mvaddch 9 25 frame-lower-right)
  (do ((row 1 (add1 row)))
      ((= row 9) '())
    (mvaddch row 0 frame-lr)
    (mvaddch row 25 frame-lr))
  (do ((col 1 (add1 col)))
      ((= col 25) '())
    (mvaddch 0 col frame-tb)
    (if (and (= 0 (modulo col 4)) (not (= col 24)))
	(mvaddch 3 col reckoning-bar-guide)
	(mvaddch 3 col reckoning-bar))
    (mvaddch 9 col frame-tb)))

(define (draw-rungs state selected)
  (do ((idx 0 (add1 idx)))
      ((= idx 24) '())
    (let* ((rung-state (vector-ref state idx))
	   (heaven-state (cdr (assoc 'heaven rung-state)))
	   (earth-state (cdr (assoc 'earth rung-state))))
      (if (= idx selected)
	  (attron A_REVERSE)
	  (attroff A_REVERSE))
      (if (= heaven-state 0)
	  (begin (mvaddch 1 (add1 idx) inactive-bead)
		 (mvaddch 2 (add1 idx) bare-rung))
	  (begin (mvaddch 1 (add1 idx) bare-rung)
		 (mvaddch 2 (add1 idx) active-heaven-bead)))
      (cond ((= earth-state 0)
	     (mvaddch 4 (add1 idx) bare-rung)
	     (mvaddch 5 (add1 idx) inactive-bead)
	     (mvaddch 6 (add1 idx) inactive-bead)
	     (mvaddch 7 (add1 idx) inactive-bead)
	     (mvaddch 8 (add1 idx) inactive-bead))
	    ((= earth-state 1)
	     (mvaddch 4 (add1 idx) active-earth-bead)
	     (mvaddch 5 (add1 idx) bare-rung)
	     (mvaddch 6 (add1 idx) inactive-bead)
	     (mvaddch 7 (add1 idx) inactive-bead)
	     (mvaddch 8 (add1 idx) inactive-bead))
	    ((= earth-state 2)
	     (mvaddch 4 (add1 idx) active-earth-bead)
	     (mvaddch 5 (add1 idx) active-earth-bead)
	     (mvaddch 6 (add1 idx) bare-rung)
	     (mvaddch 7 (add1 idx) inactive-bead)
	     (mvaddch 8 (add1 idx) inactive-bead))
	    ((= earth-state 3)
	     (mvaddch 4 (add1 idx) active-earth-bead)
	     (mvaddch 5 (add1 idx) active-earth-bead)
	     (mvaddch 6 (add1 idx) active-earth-bead)
	     (mvaddch 7 (add1 idx) bare-rung)
	     (mvaddch 8 (add1 idx) inactive-bead))
	    ((= earth-state 4)
	     (mvaddch 4 (add1 idx) active-earth-bead)
	     (mvaddch 5 (add1 idx) active-earth-bead)
	     (mvaddch 6 (add1 idx) active-earth-bead)
	     (mvaddch 7 (add1 idx) active-earth-bead)
	     (mvaddch 8 (add1 idx) bare-rung))))))

(define (main)
  (init-nc)
  (draw-frame)
  (define selection 23)
  (define state (make-state))
  (draw-rungs state selection)
  (refresh)
  (do ((ch (getch) (getch)))
      ((char-ci=? ch #\q) (deinit-nc))
    (cond ((char-ci=? ch #\a) (if (> selection 0) (set! selection (sub1 selection))))
	  ((char-ci=? ch #\d) (if (< selection 24) (set! selection (add1 selection))))
	  ((char-ci=? ch #\.) (sub1-earth! state selection))
	  ((char-ci=? ch #\;) (add1-earth! state selection))
	  ((char-ci=? ch #\[) (toggle-heaven! state selection))
	  ((char-ci=? ch #\0) (set! state (make-state)))
	  (else '()))
    (draw-rungs state selection)
    (refresh)))
